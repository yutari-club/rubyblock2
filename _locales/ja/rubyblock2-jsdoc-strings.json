{
	"builder": "3Dのビルダーの表示(ひょうじ)",
	"builder.Builder.copy": "最後(さいご)に印(しるし)を付(つ)けた位置(いち)からビルダーの現在(げんざい)位置(いち)まで立方体(りっぽうたい)領域(りょういき)をコピーします。",
	"builder.Builder.face": "ビルダーを指定(してい)方向(ほうこう)へ向(む)けます。",
	"builder.Builder.face|param|direction": "方向転換(ほうこうてんかん)後(ご)のビルダーの向(む)き",
	"builder.Builder.fill": "現在(げんざい)の位置(いち)と以前(いぜん)印(しるし)を付(つ)けた位置(いち)の間(あいだ)の空間(くうかん)を埋(う)めます。",
	"builder.Builder.fill|param|block": "領域(りょういき)を埋(う)めるのに使用(しよう)するブロックの種類(しゅるい)",
	"builder.Builder.line": "ビルダーの現在(げんざい)位置(いち)と最後(さいご)にマークした位置(いち)の間(あいだ)にブロックの線(せん)を作(つく)ります。",
	"builder.Builder.line|param|block": "線(せん)を作(つく)るのに使用(しよう)するブロックの種類(しゅるい)",
	"builder.Builder.loadStructure": "指定(してい)された名前(なまえ)の構造物(こうぞうぶつ)をビルダーの位置(いち)にロードする。",
	"builder.Builder.mark": "現在(げんざい)のビルダーの位置(いち)に印(しるし)を付(つ)けます。",
	"builder.Builder.move": "ビルダーを指定(してい)方向(ほうこう)へ移動(いどう)します。",
	"builder.Builder.move|param|blocks": "ビルダーを移動(いどう)させるブロックの数(かず)。たとえば：1",
	"builder.Builder.move|param|direction": "ビルダーを移動(いどう)する方向(ほうこう)。たとえば：SixDirection.Forward",
	"builder.Builder.paste": "ビルダーの現在(げんざい)の位置(いち)に以前(いぜん)コピーした領域(りょういき)をペーストします。",
	"builder.Builder.place": "現在(げんざい)の位置(いち)にブロックを置(お)き、印(しるし)を付(つ)けます。",
	"builder.Builder.place|param|block": "配置(はいち)するブロックの種類(しゅるい)",
	"builder.Builder.popState": "ビルダーの状態(じょうたい)を最後(さいご)に状態(じょうたい)スタックにプッシュしたときの状態(じょうたい)に戻(もど)します。",
	"builder.Builder.position": "ビルダーの位置(いち)",
	"builder.Builder.pushState": "ビルダーの現在(げんざい)の状態(じょうたい)を状態(じょうたい)スタックにプッシュします。",
	"builder.Builder.raiseWall": "最後(さいご)に印(しるし)を付(つ)けた位置(いち)からのビルダーの移動(いどう)経路(けいろ)に沿(そ)って、指定(してい)されたブロックの種類(しゅるい)と高(たか)さの壁(かべ)を立てます。",
	"builder.Builder.raiseWall|param|block": "壁(かべ)に使用(しよう)するブロックの種類(しゅるい)",
	"builder.Builder.raiseWall|param|height": "ブロック数(すう)での壁(かべ)の高(たか)さ。たとえば：5",
	"builder.Builder.saveStructure": "「構造物(こうぞうぶつ)の建築(けんちく)を開始(かいし)する」を呼(よ)び出(だ)した後(あと)に建築(けんちく)したものを構造物(こうぞうぶつ)として保存(ほぞん)する。",
	"builder.Builder.setOrigin": "ビルダーの原点(げんてん)をビルダーの現在(げんざい)の位置(いち)に設定(せってい)します。",
	"builder.Builder.shift": "ビルダーを同時(どうじ)に複数(ふくすう)の方向(ほうこう)に移動(いどう)します。",
	"builder.Builder.shift|param|forward": "前方(ぜんぽう)へ移動(いどう)するブロック数(すう)。たとえば：1",
	"builder.Builder.shift|param|left": "左へ移動(いどう)するブロック数(すう)。たとえば：1",
	"builder.Builder.shift|param|up": "上へ移動(いどう)するブロック数(すう)。たとえば：1",
	"builder.Builder.startStructure": "構造物(こうぞうぶつ)の建築(けんちく)を開始(かいし)する。この後(あと)ブロックを使(つか)って置(お)いたり、範囲(はんい)を埋(う)めたり、線(せん)を引(ひ)いたりすると構造物(こうぞうぶつ)の範囲(はんい)として自動的(じどうてき)に認識(にんしき)される。「構造物(こうぞうぶつ)として保存(ほぞん)する」を使(つか)ってメモリに保存(ほぞん)し、「構造物(こうぞうぶつ)を読(よ)み込(こ)む」を使(つか)ってすぐに再(さい)建築(けんちく)することができる。",
	"builder.Builder.teleportTo": "ビルダーを指定(してい)方向(ほうこう)へテレポートします。",
	"builder.Builder.teleportToOrigin": "ビルダーを原点(げんてん)へテレポートします。",
	"builder.Builder.teleportTo|param|position": "ビルダーを移動(いどう)する位置(いち)",
	"builder.Builder.tracePath": "最後(さいご)に印(しるし)を付(つ)けた位置(いち)から指定(してい)された種類(しゅるい)のブロックを使(つか)って軌跡(きせき)をなぞります。",
	"builder.Builder.tracePath|param|block": "ビルダーの軌跡(きせき)をなぞるのに使用(しよう)するブロックの種類(しゅるい)",
	"builder.Builder.turn": "ビルダーの向(む)きを、指定(してい)した方向(ほうこう)に変(か)えます。",
	"builder.Builder.turn|param|direction": "回転(かいてん)方向(ほうこう)。たとえば：TurnDirection.Left",
	"builder.copy": "最後(さいご)に印(しるし)を付(つ)けた位置(いち)からビルダーの現在(げんざい)位置(いち)まで立方体(りっぽうたい)領域(りょういき)をコピーします。",
	"builder.face": "ビルダーを指定(してい)方向(ほうこう)へ向(む)けます。",
	"builder.face|param|direction": "方向転換(ほうこうてんかん)後(ご)のビルダーの向(む)き",
	"builder.fill": "現在(げんざい)の位置(いち)と以前(いぜん)印(しるし)を付(つ)けた位置(いち)の間(あいだ)の空間(くうかん)を埋(う)めます。",
	"builder.fill|param|block": "領域(りょういき)を埋(う)めるのに使用(しよう)するブロックの種類(しゅるい)",
	"builder.line": "ビルダーの現在(げんざい)位置(いち)と最後(さいご)にマークした位置(いち)の間(あいだ)にブロックの線(せん)を作(つく)ります。",
	"builder.line|param|block": "線(せん)を作(つく)るのに使用(しよう)するブロックの種類(しゅるい)",
	"builder.loadStructure": "指定(してい)された名前(なまえ)の構造物(こうぞうぶつ)をビルダーの位置(いち)にロードする。",
	"builder.mark": "現在(げんざい)のビルダーの位置(いち)に印(しるし)を付(つ)けます。",
	"builder.move": "ビルダーを指定(してい)方向(ほうこう)へ移動(いどう)します。",
	"builder.move|param|blocks": "ビルダーを移動(いどう)させるブロックの数(かず)。たとえば：1",
	"builder.move|param|direction": "ビルダーを移動(いどう)する方向(ほうこう)。たとえば：SixDirection.Forward",
	"builder.paste": "ビルダーの現在(げんざい)の位置(いち)に以前(いぜん)コピーした領域(りょういき)をペーストします。",
	"builder.place": "現在(げんざい)の位置(いち)にブロックを置(お)き、印(しるし)を付(つ)けます。",
	"builder.place|param|block": "配置(はいち)するブロックの種類(しゅるい)",
	"builder.popState": "ビルダーの状態(じょうたい)を最後(さいご)に状態(じょうたい)スタックにプッシュしたときの状態(じょうたい)に戻(もど)します。",
	"builder.position": "ビルダーの位置(いち)",
	"builder.pushState": "ビルダーの現在(げんざい)の状態(じょうたい)を状態(じょうたい)スタックにプッシュします。",
	"builder.raiseWall": "最後(さいご)に印(しるし)を付(つ)けた位置(いち)からのビルダーの移動(いどう)経路(けいろ)に沿(そ)って、指定(してい)されたブロックの種類(しゅるい)と高(たか)さの壁(かべ)を立てます。",
	"builder.raiseWall|param|block": "壁(かべ)に使用(しよう)するブロックの種類(しゅるい)",
	"builder.raiseWall|param|height": "ブロック数(すう)での壁(かべ)の高(たか)さ。たとえば：5",
	"builder.saveStructure": "「構造物(こうぞうぶつ)の建築(けんちく)を開始(かいし)する」を呼(よ)び出(だ)した後(あと)に建築(けんちく)したものを構造物(こうぞうぶつ)として保存(ほぞん)する。",
	"builder.setOrigin": "ビルダーの原点(げんてん)をビルダーの現在(げんざい)の位置(いち)に設定(せってい)します。",
	"builder.shift": "ビルダーを同時(どうじ)に複数(ふくすう)の方向(ほうこう)に移動(いどう)します。",
	"builder.shift|param|forward": "前方(ぜんぽう)へ移動(いどう)するブロック数(すう)。たとえば：1",
	"builder.shift|param|left": "左へ移動(いどう)するブロック数(すう)。たとえば：1",
	"builder.shift|param|up": "上へ移動(いどう)するブロック数(すう)。たとえば：1",
	"builder.startStructure": "構造物(こうぞうぶつ)の建築(けんちく)を開始(かいし)する。この後(あと)ブロックを使(つか)って置(お)いたり、範囲(はんい)を埋(う)めたり、線(せん)を引(ひ)いたりすると構造物(こうぞうぶつ)の範囲(はんい)として自動的(じどうてき)に認識(にんしき)される。「構造物(こうぞうぶつ)として保存(ほぞん)する」を使(つか)ってメモリに保存(ほぞん)し、「構造物(こうぞうぶつ)を読(よ)み込(こ)む」を使(つか)ってすぐに再(さい)建築(けんちく)することができる。",
	"builder.teleportTo": "ビルダーを指定(してい)方向(ほうこう)へテレポートします。",
	"builder.teleportToOrigin": "ビルダーを原点(げんてん)へテレポートします。",
	"builder.teleportTo|param|position": "ビルダーを移動(いどう)する位置(いち)",
	"builder.tracePath": "最後(さいご)に印(しるし)を付(つ)けた位置(いち)から指定(してい)された種類(しゅるい)のブロックを使(つか)って軌跡(きせき)をなぞります。",
	"builder.tracePath|param|block": "ビルダーの軌跡(きせき)をなぞるのに使用(しよう)するブロックの種類(しゅるい)",
	"builder.turn": "ビルダーの向(む)きを、指定(してい)した方向(ほうこう)に変(か)えます。",
	"builder.turn|param|direction": "回転(かいてん)方向(ほうこう)。たとえば：TurnDirection.Left",
	"AgentAssist": "エージェントのアシスト動作(どうさ)",
	"Array": "リスト内(ない)のアイテムの追加(ついか)、削除(さくじょ)、および置(お)き換(か)えを行(おこな)います。",
	"Array._pickRandom": "配列(はいれつ)からランダムな値(あたい)を返(かえ)す",
	"Array._popStatement": "配列(はいれつ)から最後(さいご)の要素(ようそ)を削除(さくじょ)し、その値(あたい)を返(かえ)します。",
	"Array._removeAtStatement": "特定(とくてい)の位置(いち)にある要素(ようそ)を削除(さくじょ)します。",
	"Array._shiftStatement": "配列(はいれつ)から最初(さいしょ)の要素(ようそ)を削除(さくじょ)し、その値(あたい)を返(かえ)します。このメソッドは、配列(はいれつ)の長(なが)さを変更(へんこう)します。",
	"Array._unshiftStatement": "配列(はいれつ)の先頭(せんとう)に要素(ようそ)を 1 つ追加(ついか)して、配列(はいれつ)の新(あたら)しい長(なが)さを返(かえ)します。",
	"Array.concat": "配列(はいれつ)を別(べつ)の配列(はいれつ)と連結(れんけつ)する。",
	"Array.concat|param|arr": "連結(れんけつ)される他(ほか)の配列(はいれつ)",
	"Array.every": "配列(はいれつ)内(ない)のすべての要素(ようそ)が、指定(してい)された関数(かんすう)によって実装(じっそう)されたテストに合格(ごうかく)するかどうかをテストします。",
	"Array.every|param|callbackfn": "最大(さいだい) 2 つの引数(ひきすう)を受(う)け取(と)る関数(かんすう)。every メソッドは配列(はいれつ)の各(かく)要素(ようそ)に対(たい)して 1 回(かい) callbackfn 関数(かんすう)を呼(よ)び出(だ)します。",
	"Array.fill": "配列(はいれつ)の指定(してい)の範囲(はんい)のすべての要素(ようそ)を一定(いってい)の値(あたい)にする。終了(しゅうりょう)インデックスは範囲(はんい)に含(ふく)まない。",
	"Array.filter": "コールバック関数(かんすう)で指定(してい)された条件(じょうけん)を満(み)たす配列(はいれつ)の要素(ようそ)を返(かえ)します。",
	"Array.filter|param|callbackfn": "最大(さいだい) 2 つの引数(ひきすう)を受(う)け取(と)る関数(かんすう)。filter メソッドは配列(はいれつ)の各(かく)要素(ようそ)に対(たい)して 1 回(かい) callbackfn 関数(かんすう)を呼(よ)び出(だ)します。",
	"Array.find": "指定(してい)されたテスト関数(かんすう)を満(み)たす配列(はいれつ)内(ない)の最初(さいしょ)の要素(ようそ)の値(あたい)を返(かえ)します。一つも見つからない場合(ばあい)は、未(み)定義(ていぎ)が返(かえ)されます。",
	"Array.forEach": "配列(はいれつ)の各(かく)要素(ようそ)に対(たい)して定義(ていぎ)されたコールバック関数(かんすう)を呼(よ)び出(だ)す。",
	"Array.forEach|param|callbackfn": "最大(さいだい) 2 つの引数(ひきすう)を受(う)け取(と)る関数(かんすう)。forEach メソッドは配列(はいれつ)の各(かく)要素(ようそ)に対(たい)して 1 回(かい) callbackfn 関数(かんすう)を呼(よ)び出(だ)します。",
	"Array.get": "指定(してい)された位置(いち)の値(あたい)を取得(しゅとく)します。",
	"Array.get|param|index": "0 から始(はじ)まるアイテムのリスト中の位置(いち)。たとえば：0",
	"Array.indexOf": "配列(はいれつ)内(ない)で値(あたい)が最初(さいしょ)に出現(しゅつげん)する位置(いち)を返(かえ)します。",
	"Array.indexOf|param|fromIndex": "検索(けんさく)を開始(かいし)する配列(はいれつ)の場所(ばしょ)。fromIndex を省略(しょうりゃく)した場合(ばあい)、検索(けんさく)は位置(いち) 0 から始(はじ)まります。",
	"Array.indexOf|param|item": "配列(はいれつ)内(ない)で検索(けんさく)する値(あたい)。",
	"Array.insertAt": "指定(してい)された位置(いち)に値(あたい)を挿入(そうにゅう)し、長(なが)さを 1 つ増(ふ)やします",
	"Array.insertAt|param|index": "値(あたい)を挿入(そうにゅう)するリスト中の位置(いち)を 0 から始(はじ)まる値(あたい)で指定(してい)します。たとえば：0",
	"Array.isArray": "指定(してい)されたオブジェクトが配列(はいれつ)か確認(かくにん)する。",
	"Array.join": "配列(はいれつ)のすべての要素(ようそ)を文字列(もじれつ)でつなげた文字列(もじれつ)を返(かえ)す。",
	"Array.join|param|sep": "文字列(もじれつ)の区切(くぎ)り記号(きごう)",
	"Array.length": "配列(はいれつ)の長(なが)さを取得(しゅとく)または設定(せってい)します。この数値(すうち)は配(くばり)列(れつ)の最後(さいご)の要素(ようそ)の位置(いち)よりも 1 つ大きな値(あたい)になります。",
	"Array.map": "配列(はいれつ)の各(かく)要素(ようそ)に対(たい)して定義(ていぎ)されたコールバック関数(かんすう)を呼(よ)び出(だ)し、結果(けっか)を含(ふく)む配列(はいれつ)を返(かえ)します。",
	"Array.map|param|callbackfn": "最大(さいだい) 2 つの引数(ひきすう)を受(う)け取(と)る関数(かんすう)。map メソッドは配列(はいれつ)の各(かく)要素(ようそ)に対(たい)して 1 回(かい)ずつ callbackfn 関数(かんすう)を呼(よ)び出(だ)します。",
	"Array.pop": "配列(はいれつ)から最後(さいご)の要素(ようそ)を削除(さくじょ)し、その値(あたい)を返(かえ)します。",
	"Array.push": "配列(はいれつ)に新(あたら)しい要素(ようそ)を追加(ついか)します。",
	"Array.reduce": "配列(はいれつ)のすべての要素(ようそ)に対(たい)して指定(してい)されたコールバック関数(かんすう)を呼(よ)び出(だ)します。コールバック関数(かんすう)の戻(もど)り値(ち)は累積(るいせき)した結果(けっか)となり、次回(じかい)コールバック関数(かんすう)が呼(よ)び出(だ)された際(さい)の引数(ひきすう)として提供(ていきょう)されます。",
	"Array.reduce|param|callbackfn": "最大(さいだい) 3 つの引数(ひきすう)を受(う)け取(と)る関数(かんすう)。reduce メソッドは配列(はいれつ)の各(かく)要素(ようそ)に対(たい)して 1 回(かい)ずつ callbackfn 関数(かんすう)を呼(よ)び出(だ)します。",
	"Array.reduce|param|initialValue": "累積(るいせき)を開始(かいし)する初期(しょき)値(ち)。callbackfn 関数(かんすう)の初回(しょかい)呼(よ)び出(だ)し時(どき)にはこの値(あたい)を配列(はいれつ)の値(あたい)ではなく、引数(ひきすう)として提供(ていきょう)します。",
	"Array.removeAt": "特定(とくてい)の位置(いち)にある要素(ようそ)を削除(さくじょ)し、その要素(ようそ)を返(かえ)します",
	"Array.removeElement": "オブジェクト内(ない)で最初(さいしょ)に出現(しゅつげん)したものを削除(さくじょ)します。削除(さくじょ)された場合(ばあい)は true を返(かえ)します。",
	"Array.reverse": "配列(はいれつ)に含(ふく)まれる要素(ようそ)を逆(ぎゃく)の順番(じゅんばん)にします。最初(さいしょ)の配列(はいれつ)要素(ようそ)は最後(さいご)の要素(ようそ)となり、最後(さいご)の配列(はいれつ)要素(ようそ)は最初(さいしょ)の要素(ようそ)となります。",
	"Array.set": "指定(してい)された位置(いち)に値(あたい)を格納(かくのう)します",
	"Array.set|param|index": "値(あたい)を格納(かくのう)するリスト中の位置(いち)を 0 から始(はじ)まる値(あたい)で指定(してい)します。たとえば：0",
	"Array.set|param|value": "挿入(そうにゅう)する値(あたい)。たとえば：0",
	"Array.shift": "配列(はいれつ)から最初(さいしょ)の要素(ようそ)を削除(さくじょ)し、その値(あたい)を返(かえ)します。このメソッドは、配列(はいれつ)の長(なが)さを変更(へんこう)します。",
	"Array.slice": "配列(はいれつ)の一部(いちぶ)を返(かえ)します。",
	"Array.slice|param|end": "配列(はいれつ)の指定(してい)部分(ぶぶん)の終了(しゅうりょう)位置(いち)。たとえば：0",
	"Array.slice|param|start": "配列(はいれつ)の指定(してい)部分(ぶぶん)の開始(かいし)位置(いち)。たとえば：0",
	"Array.some": "指定(してい)された関数(かんすう)で実装(じっそう)されているテストに、配列(はいれつ)の中の少(すく)なくとも 1 つの要素(ようそ)が合格(ごうかく)するかどうかを確認(かくにん)する。",
	"Array.some|param|callbackfn": "最大(さいだい) 2 つの引数(ひきすう)を受(う)け取(と)る関数(かんすう)。some メソッドは配列(はいれつ)の各(かく)要素(ようそ)に対(たい)して 1 回(かい) callbackfn 関数(かんすう)を呼(よ)び出(だ)します。",
	"Array.sort": "配列(はいれつ)の要素(ようそ)を並(なら)び替(か)えた後(あと)、配列(はいれつ)を返(かえ)します。並(なら)び順(じゅん)は必(かなら)ずしも安定(あんてい)しているとは限(かぎ)りません。",
	"Array.splice": "配列(はいれつ)から要素(ようそ)を削除(さくじょ)します。",
	"Array.splice|param|deleteCount": "削除(さくじょ)する要素(ようそ)の数(かず)。たとえば：0",
	"Array.splice|param|start": "要素(ようそ)の削除(さくじょ)を開始(かいし)する配列(はいれつ)内(ない)の 0 から始(はじ)まる位置(いち)。たとえば：0",
	"Array.unshift": "配列(はいれつ)の先頭(せんとう)に要素(ようそ)を 1 つ追加(ついか)して、配列(はいれつ)の新(あたら)しい長(なが)さを返(かえ)します。",
	"Array@type": "リスト内(ない)のアイテムの追加(ついか)、削除(さくじょ)、および置(お)き換(か)えを行(おこな)います。",
	"Block": "Minecraft のブロックの種類(しゅるい): 草、石、空気、その他(た)...",
	"Boolean.toString": "オブジェクトの文字列(もじれつ)表現(ひょうげん)を返(かえ)します。",
	"Buffer": "pythonに必要(ひつよう)な空の実装(じっそう)バッファー",
	"ChatArgument": "チャットコマンド用(よう)の有効(ゆうこう)な引数(ひきすう)",
	"ColoredBlock": "色(いろ)を変更(へんこう)できるブロック",
	"DayTime": "時間(じかん)",
	"FillOperation": "既存(きそん)のブロックに対(たい)する塗(ぬ)りつぶしオプション。既存(きそん)のブロックの維持(いじ)、入(い)れ替(か)え、破壊(はかい)を制御(せいぎょ)します。",
	"FillOperation.Destroy": "指定(してい)した領域(りょういき)内(ない)のすべてのブロック（空気を含(ふく)む）を指定(してい)されたブロックに置(お)き換(か)え、（未(み)変更(へんこう)のものを含(ふく)む）既存(きそん)のブロックとブロックの中身(なかみ)をあたかもエンチャントされていないダイヤのシャベルやツルハシを使(つか)って採掘(さいくつ)されたエンティティであるかのようにドロップします。（つたのようにはさみを使(つか)ってのみ採掘(さいくつ)されるブロックはドロップしません。液体(えきたい)も同(おな)じです。）",
	"FillOperation.Hollow": "指定(してい)した領域(りょういき)の外枠(そとわく)にあるブロックのみを指定(してい)ブロックで置(お)き換(か)えます。\n中のブロックは空気に変更(へんこう)され、それ自身(じしん)ではなく中身(なかみ)をエンティティとしてドロップします。\n指定(してい)した領域(りょういき)の内側(うちがわ)にブロックが存在(そんざい)しない場合(ばあい)（少(すく)なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様(どうよう)の動作(どうさ)を行(おこな)います。",
	"FillOperation.Keep": "指定(してい)した領域(りょういき)の空気ブロックのみを指定(してい)ブロックで置(お)き換(か)えます。",
	"FillOperation.Outline": "指定(してい)した領域(りょういき)の外枠(そとわく)にあるブロックのみを指定(してい)ブロックで置(お)き換(か)えます。\n中のブロックには影響(えいきょう)はありません。指定(してい)した領域(りょういき)の内側(うちがわ)にブロックが存在(そんざい)しない場合(ばあい)（少(すく)なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様(どうよう)の動作(どうさ)を行(おこな)います。",
	"FillOperation.Replace": "指定(してい)した領域(りょういき)内(ない)のすべてのブロック（空気を含(ふく)む）を指定(してい)されたブロックに置(お)き換(か)えますが、ブロックやブロックの中身(なかみ)をエンティティとしてドロップしません。",
	"GameDifficulty": "ゲームプレイ設定(せってい)用(よう)のゲームの難易(なんい)度(ど)",
	"GameRule": "ゲームプレイ設定(せってい)用(よう)のゲームのルール",
	"Infinity": "正の無限大(むげんだい)を表(あらわ)す定数(ていすう)。",
	"LeverPosition": "オンまたはオフの場合(ばあい)のレバーの向(む)き",
	"Math": "より複雑(ふくざつ)な数値(すうち)演算(えんざん)を行(おこな)います。",
	"Math.abs": "数値(すうち)の絶対値(ぜったいち)を返(かえ)します（絶対値(ぜったいち)とはゼロとの距離(きょり)です）。たとえば、-5の絶対値(ぜったいち)は、5の絶対値(ぜったいち)と同(おな)じく「5」です。",
	"Math.abs|param|x": "絶対値(ぜったいち)が必要(ひつよう)な数値(すうち)式(しき)を指定(してい)します。",
	"Math.acos": "数値(すうち)のアークコサイン（ラジアン表記(ひょうき)）を返(かえ)します。",
	"Math.acos|param|x": "数値(すうち)",
	"Math.asin": "数値(すうち)のアークサイン（ラジアン表記(ひょうき)）を返(かえ)します。",
	"Math.asin|param|x": "数値(すうち)",
	"Math.atan": "数値(すうち)のアークタンジェント（ラジアン表記(ひょうき)）を返(かえ)します。",
	"Math.atan2": "左の値(あたい)を右の値(あたい)で割(わ)った結果(けっか)のアークタンジェントを返(かえ)します。",
	"Math.atan2|param|x": "数値(すうち)",
	"Math.atan2|param|y": "数値(すうち)",
	"Math.atan|param|x": "数値(すうち)",
	"Math.ceil": "引数(ひきすう)で指定(してい)された数値(すうち)以上(いじょう)の最小(さいしょう)値(ち)を返(かえ)します。",
	"Math.ceil|param|x": "数値(すうち)表現(ひょうげん)を指定(してい)します。",
	"Math.constrain": "数値(すうち)を範囲(はんい)内(ない)に制限(せいげん)します",
	"Math.constrain|param|high": "データ範囲(はんい)の上限(じょうげん)値(ち)（すべてのデータ型(がた)）",
	"Math.constrain|param|low": "データ範囲(はんい)の下限(かげん)値(ち)（すべてのデータ型(がた)）",
	"Math.constrain|param|value": "制限(せいげん)する値(あたい)（すべてのデータ型(がた)）",
	"Math.cos": "数値(すうち)のコサインを返(かえ)します。",
	"Math.cos|param|x": "ラジアン表記(ひょうき)の角度(かくど)",
	"Math.exp": "``e^x`` を返(かえ)します。",
	"Math.exp|param|x": "数値(すうち)",
	"Math.floor": "引数(ひきすう)で指定(してい)された数値(すうち)以下(いか)の最大(さいだい)値(ち)を返(かえ)します。",
	"Math.floor|param|x": "数値(すうち)表現(ひょうげん)を指定(してい)します。",
	"Math.idiv": "2 つの数値(すうち)の商(しょう)を符号(ふごう)付(つき) 32 ビット整数(せいすう)値(ち)で返(かえ)します。",
	"Math.idiv|param|x": "最初(さいしょ)の数値(すうち)",
	"Math.idiv|param|y": "二番目(にばんめ)の数値(すうち)",
	"Math.imul": "2 つの数値(すうち)の積(せき)を符号(ふごう)付(つき) 32 ビット整数(せいすう)値(ち)で返(かえ)します。",
	"Math.imul|param|x": "最初(さいしょ)の数値(すうち)",
	"Math.imul|param|y": "二番目(にばんめ)の数値(すうち)",
	"Math.isNaN": "JavaScript の isNaN() 関数(かんすう)を公開(こうかい)します。",
	"Math.log": "数値(すうち)の自然(しぜん)対数(たいすう)（底(そこ) e）を返(かえ)します。",
	"Math.log|param|x": "数値(すうち)",
	"Math.map": "数値(すうち)を、ある範囲(はんい)から別(べつ)の範囲(はんい)にマップします。つまり、数値(すうち)が``元(もと)の下限(かげん)``なら``結果(けっか)の下限(かげん)``に変換(へんかん)され、``元(もと)の上限(じょうげん)``なら``結果(けっか)の上限(じょうげん)``に変換(へんかん)され、間(あいだ)の値(あたい)なら間(あいだ)の値(あたい)に変換(へんかん)されます。",
	"Math.map|param|fromHigh": "元(もと)の値(あたい)の上限(じょうげん)。たとえば：1023",
	"Math.map|param|fromLow": "元(もと)の値(あたい)の下限(かげん)。",
	"Math.map|param|toHigh": "結果(けっか)の値(あたい)の上限(じょうげん)。たとえば：4",
	"Math.map|param|toLow": "結果(けっか)の値(あたい)の下限(かげん)。",
	"Math.map|param|value": "変換(へんかん)する、元(もと)の値(あたい)。",
	"Math.max": "指定(してい)された2つの数値(すうち)式(しき)のうち、大きい方(ほう)を返(かえ)します。",
	"Math.min": "指定(してい)された2つの数値(すうち)式(しき)のうち、小さい方(ほう)を返(かえ)します。",
	"Math.pow": "底(そこ)を指定(してい)の指数(しすう)で累乗(るいじょう)した値(あたい)を返(かえ)します。",
	"Math.pow|param|x": "式(しき)の底(そこ)の値(あたい)を指定(してい)します。",
	"Math.pow|param|y": "式(しき)の指数(しすう)値(ち)を指定(してい)します。",
	"Math.random": "0と1の間(あいだ)の擬似(ぎじ)乱数(らんすう)を返(かえ)します。",
	"Math.randomRange": "min と max の間(あいだ)に含(ふく)まれる疑似(ぎじ)乱数(らんすう)を返(かえ)します。両方(りょうほう)の数値(すうち)が整数(せいすう)値(ち)の場合(ばあい)は、結果(けっか)も整数(せいすう)値(ち)となります。",
	"Math.randomRange|param|max": "境界(きょうかい)を含(ふく)めた上限(じょうげん)。たとえば：10",
	"Math.randomRange|param|min": "境界(きょうかい)を含(ふく)めた下限(かげん)。たとえば：0",
	"Math.round": "指定(してい)の数値(すうち)表現(ひょうげん)を最(もっと)も近(ちか)い数値(すうち)に丸(まる)めて返(かえ)します。",
	"Math.roundWithPrecision": "``x``を、指定(してい)された``桁数(けたすう)``の数字(すうじ)に丸(まる)めます",
	"Math.roundWithPrecision|param|digits": "結果(けっか)の桁数(けたすう)",
	"Math.roundWithPrecision|param|x": "丸(まる)める数(かず)",
	"Math.round|param|x": "最(もっと)も近(ちか)い数値(すうち)に丸(まる)められる値(あたい)。",
	"Math.sign": "x が正、負(ふ)、または 0 のどれであるかを示(しめ)す符号(ふごう)を返(かえ)します。",
	"Math.sign|param|x": "テストする数値(すうち)式(しき)",
	"Math.sin": "数値(すうち)のサインを返(かえ)します。",
	"Math.sin|param|x": "ラジアン表記(ひょうき)の角度(かくど)",
	"Math.sqrt": "数値(すうち)の平方根(へいほうこん)を返(かえ)します。",
	"Math.sqrt|param|x": "数値(すうち)表現(ひょうげん)を指定(してい)します。",
	"Math.tan": "数値(すうち)のタンジェントを返(かえ)します。",
	"Math.tan|param|x": "ラジアン表記(ひょうき)の角度(かくど)",
	"Math.trunc": "小数(しょうすう)部(ぶ)を切(き)り捨(す)てた数値(すうち)を返(かえ)します。",
	"Math.trunc|param|x": "数値(すうち)表現(ひょうげん)。",
	"NaN": "非(ひ)数(かず)(Not-A-Number)を表(あらわ)す定数(ていすう)。",
	"Number.isNaN": "指定(してい)された値(あたい)が数値(すうち)型(がた)のNaNかどうか確認(かくにん)する。",
	"Number.toString": "数値(すうち)の文字列(もじれつ)表現(ひょうげん)を返(かえ)します。",
	"Object.keys": "オブジェクト内(ない)のフィールド名を返(かえ)します。",
	"Position": "プレイヤーの位置(いち) (~) に対(たい)して相対的(そうたいてき)な世界(せかい)の座標(ざひょう)。",
	"Position.add": "オフセットを追加(ついか)して新(あたら)しい位置(いち)を返(かえ)します。",
	"Position.getValue": "指定(してい)した座標(ざひょう)の値(あたい)を取得(しゅとく)します（x、y または z）。",
	"Position.getValue|param|direction": "座標(ざひょう)の値(あたい)を返(かえ)す軸(じく)",
	"Position.isRelative": "座標(ざひょう)がユーザーに対(たい)して相対的(そうたいてき)であるかどうかを示(しめ)す値(あたい)を取得(しゅとく)します。",
	"Position.move": "指定(してい)のブロックによって移動(いどう)された位置(いち)を返(かえ)します。",
	"Position.toString": "この位置(いち)の文字列(もじれつ)表現(ひょうげん)を返(かえ)します。",
	"Position.toWorld": "この位置(いち)を世界(せかい)での位置(いち)に変換(へんかん)して、世界(せかい)での位置(いち)を新(あら)たに作成(さくせい)します。",
	"ShapeOperation": "図形(ずけい)を埋(う)める演算子(えんざんし)",
	"ShapeOperation.Hollow": "指定(してい)した領域(りょういき)の外枠(そとわく)にあるブロックのみを指定(してい)ブロックで置(お)き換(か)えます。\n中のブロックは空気に変更(へんこう)され、それ自身(じしん)ではなく中身(なかみ)をエンティティとしてドロップします。\n指定(してい)した領域(りょういき)の内側(うちがわ)にブロックが存在(そんざい)しない場合(ばあい)（少(すく)なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様(どうよう)の動作(どうさ)を行(おこな)います。",
	"ShapeOperation.Outline": "指定(してい)した領域(りょういき)の外枠(そとわく)にあるブロックのみを指定(してい)ブロックで置(お)き換(か)えます。\n中のブロックには影響(えいきょう)はありません。指定(してい)した領域(りょういき)の内側(うちがわ)にブロックが存在(そんざい)しない場合(ばあい)（少(すく)なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様(どうよう)の動作(どうさ)を行(おこな)います。",
	"ShapeOperation.Replace": "指定(してい)した領域(りょういき)内(ない)のすべてのブロック（空気を含(ふく)む）を指定(してい)されたブロックに置(お)き換(か)えますが、ブロックやブロックの中身(なかみ)をエンティティとしてドロップしません。",
	"String": "テキスト文字列(もじれつ)の結合(けつごう)、分割(ぶんかつ)、検索(けんさく)を行(おこな)います。",
	"String.charAt": "指定(してい)した位置(いち)にある文字を返(かえ)します。",
	"String.charAt|param|index": "目的(もくてき)の文字の位置(いち)を 0 から始(はじ)まる値(あたい)で指定(してい)します。",
	"String.charCodeAt": "指定(してい)された位置(いち)にある文字の Unicode 値(あたい)を返(かえ)します。",
	"String.charCodeAt|param|index": "目的(もくてき)の文字の位置(いち)を 0 から始(はじ)まる値(あたい)で指定(してい)します。指定(してい)した位置(いち)に文字がない場合(ばあい)は、NaN が返(かえ)されます。",
	"String.compare": "2 つの文字列(もじれつ)の文字の順序(じゅんじょ)にどのような違(ちが)いがあるかを確認(かくにん)してください (ASCII エンコーディングで)。",
	"String.compare|param|that": "ターゲット文字列(もじれつ)と比較(ひかく)する文字列(もじれつ)",
	"String.concat": "2つ以上(いじょう)の文字列(もじれつ)を連結(れんけつ)した文字列(もじれつ)を返(かえ)します。",
	"String.concat|param|other": "文字列(もじれつ)の末尾(まつび)に追加(ついか)する文字列(もじれつ)。",
	"String.fromCharCode": "指定(してい)された文字コードから、その文字コードに相当(そうとう)する文字1文字だけを含(ふく)む文字列(れつ)を作(つく)ります。",
	"String.includes": "文字列(もじれつ)に指定(してい)した文字列(もじれつ)の文字が含(ふく)まれているかどうかを判断(はんだん)します。",
	"String.includes|param|searchValue": "検索(けんさく)するテキスト",
	"String.includes|param|start": "検索(けんさく)の開始(かいし)インデックス (オプション)",
	"String.indexOf": "文字列(もじれつ)内(ない)で指定(してい)した値(あたい)が最初(さいしょ)に出現(しゅつげん)する位置(いち)を返(かえ)します。",
	"String.indexOf|param|searchValue": "検索(けんさく)するテキスト",
	"String.indexOf|param|start": "検索(けんさく)の開始(かいし)インデックス (オプション)",
	"String.isEmpty": "文字列(もじれつ)が空かどうかを示(しめ)す値(あたい)を返(かえ)します",
	"String.length": "文字列(もじれつ)オブジェクトの長(なが)さを返(かえ)します。",
	"String.replace": "指定(してい)された文字列(もじれつ)に最初(さいしょ)に一致(いっち)したところを、別(べつ)の指定(してい)された文字列(もじれつ)に置(お)き換(か)えたものを返(かえ)す。",
	"String.replaceAll": "指定(してい)された文字列(もじれつ)に一致(いっち)したところすべてを、別(べつ)の指定(してい)された文字列(もじれつ)に置(お)き換(か)えたものを返(かえ)す。",
	"String.replaceAll|param|replacer": "現在(げんざい)の文字列(もじれつ)で部分(ぶぶん)文字列(もじれつ)を置(お)き換(か)える先の文字列(もじれつ)、または部分(ぶぶん)文字列(もじれつ)を受(う)け取(と)り置(お)き換(か)える先の文字列(もじれつ)を返(かえ)す関数(かんすう)。",
	"String.replaceAll|param|toReplace": "現在(げんざい)の文字列(もじれつ)で置(お)き換(か)えられる部分(ぶぶん)文字列(もじれつ)",
	"String.replace|param|replacer": "現在(げんざい)の文字列(もじれつ)で部分(ぶぶん)文字列(もじれつ)を置(お)き換(か)える先の文字列(もじれつ)、または部分(ぶぶん)文字列(もじれつ)を受(う)け取(と)り置(お)き換(か)える先の文字列(もじれつ)を返(かえ)す関数(かんすう)。",
	"String.replace|param|toReplace": "現在(げんざい)の文字列(もじれつ)で置(お)き換(か)えられる部分(ぶぶん)文字列(もじれつ)",
	"String.slice": "現在(げんざい)の文字列(もじれつ)の部分(ぶぶん)文字列(もじれつ)を返(かえ)します。",
	"String.slice|param|end": "最後(さいご)の文字の一つ前(まえ)のインデックス",
	"String.slice|param|start": "最初(さいしょ)の文字の位置(いち)。負(ふ)の値(あたい)を指定(してい)すると、末尾(まつび)から数(かぞ)えることができます。たとえば：0",
	"String.split": "区切(くぎ)り文字で文字列(もじれつ)を分割(ぶんかつ)する",
	"String.substr": "現在(げんざい)の文字列(もじれつ)の部分(ぶぶん)文字列(もじれつ)を返(かえ)します。",
	"String.substr|param|length": "抽出(ちゅうしゅつ)する文字数(すう)",
	"String.substr|param|start": "最初(さいしょ)の文字の位置(いち)。負(ふ)の値(あたい)を指定(してい)すると、末尾(まつび)から数(かぞ)えることができます。たとえば：0",
	"String.toLowerCase": "文字列(もじれつ)を小文字に変換(へんかん)する。",
	"String.toUpperCase": "文字列(もじれつ)を大文字に変換(へんかん)する。",
	"String.trim": "現在(げんざい)の文字列(もじれつ)の両端(りょうたん)から空白を削除(さくじょ)した部分(ぶぶん)文字列(もじれつ)を返(かえ)します",
	"String@type": "テキスト文字列(もじれつ)の結合(けつごう)、分割(ぶんかつ)、検索(けんさく)を行(おこな)います。",
	"StringMap": "文字列(もじれつ)のキーと文字列(もじれつ)の値(あたい)の辞書(じしょ)",
	"TargetSelector.addRule": "このターゲットセレクターにルールを追加(ついか)します。",
	"TargetSelector.addRule|param|rule": "追加(ついか)するルール。たとえば：type",
	"TargetSelector.addRule|param|value": "ルールの値(あたい)。たとえば：chicken",
	"TargetSelector.atCoordinate": "このターゲットのセレクターの基本(きほん)座標(ざひょう)を設定(せってい)します。",
	"TargetSelector.atCoordinate|param|p": "このセレクターに設定(せってい)すべき座標(ざひょう)",
	"TargetSelector.outsideRadius": "このセレクターの基本(きほん)座標(ざひょう)からの最小(さいしょう)距離(きょり)を設定(せってい)します。",
	"TargetSelector.outsideRadius|param|radius": "このターゲットセレクターからの最小(さいしょう)距離(きょり)（ブロック単位(たんい)）。たとえば：10",
	"TargetSelector.toString": "このターゲットセレクターのゲームの表記(ひょうき)を含(ふく)む文字列(もじれつ)を返(かえ)します。",
	"TargetSelector.withinRadius": "このセレクターの基本(きほん)座標(ざひょう)からの最大(さいだい)距離(きょり)を設定(せってい)します。",
	"TargetSelector.withinRadius|param|radius": "このターゲットセレクターからの最大(さいだい)距離(きょり)（ブロック単位(たんい)）。たとえば：5",
	"TestForBlocksMask.All": "元(もと)の領域(りょういき)と移動(いどう)先の領域(りょういき)内(ない)のすべてのブロックは、正確(せいかく)に一致(いっち)する必要(ひつよう)があります。",
	"TestForBlocksMask.Masked": "元(もと)の領域(りょういき)内(ない)の空気ブロックは、移動(いどう)先の領域(りょういき)内(ない)の任意(にんい)のブロックに一致(いっち)します。",
	"TimeQuery": "時間(じかん)を取得(しゅとく)する際(さい)の時間(じかん)の種類(しゅるい)",
	"TimeQuery.RealLife": "Minecraft ゲームのティックで表(あらわ)した一日の実際(じっさい)の時刻(じこく)",
	"TravelMethod": "プレイヤーやモブの移動(いどう)方法(ほうほう)",
	"TravelMethod.Climb": "はしごを登(のぼ)る",
	"TravelMethod.Fall": "飛行(ひこう)しない時(とき)は宙(ちゅう)に浮(う)きます（上か下に転(ころ)びます）",
	"TravelMethod.Fly": "飛行(ひこう)",
	"TravelMethod.Riding": "乗(の)り物(もの)に乗(の)る",
	"TravelMethod.Sprint": "走(はし)る",
	"TravelMethod.SwimLava": "溶岩(ようがん)の中で泳(およ)ぐ",
	"TravelMethod.SwimWater": "水の中で泳(およ)ぐ",
	"TravelMethod.Walk": "普通(ふつう)に歩(ある)く（地上(ちじょう)での既定(きてい)値(ち)）",
	"_py.range": "指定(してい)された値(あたい)未満(みまん)までの数値(すうち)のシーケンスを返(かえ)す。もし複数(ふくすう)の引数(ひきすう)が指定(してい)された場合(ばあい)、最初(さいしょ)の引数(ひきすう)はシーケンスの最初(さいしょ)の値(あたい)を示(しめ)します。",
	"_py.range|param|first": "シーケンスを終(お)える値(あたい)。この値(あたい)はシーケンスに含(ふく)まれない。",
	"_py.range|param|step": "範囲(はんい)内(ない)の各(かく)ステップで増減(ぞうげん)する値(あたい)。0以外(いがい)の整数(せいすう)でなければならない。",
	"_py.range|param|stop": "シーケンスを終(お)える値(あたい)。この値(あたい)はシーケンスに含(ふく)まれない。",
	"_py.slice": "pythonの拡張(かくちょう)スライス構文(こうぶん)に従(したが)って、配列(はいれつ)の一部(いちぶ)を返(かえ)す。",
	"_py.stringSlice": "pythonの拡張(かくちょう)スライス構文(こうぶん)に従(したが)って、文字列(もじれつ)の一部(いちぶ)を返(かえ)す。",
	"agent": "あなたの目標(もくひょう)達成(たっせい)を支援(しえん)する Minecraft のアシスタント。",
	"agent.attack": "エージェントに指定(してい)された方向(ほうこう)に攻撃(こうげき)を命令(めいれい)するコマンドです。",
	"agent.attack|param|direction": "攻撃(こうげき)する方向(ほうこう)。たとえば：SixDirection.Forward",
	"agent.collect": "エージェントに、指定(してい)したブロックまたはアイテムを回収(かいしゅう)させるためのコマンドです。",
	"agent.collectAll": "エージェントに、近(ちか)くに存在(そんざい)する全(すべ)てのブロックやアイテムを回収(かいしゅう)させるためのコマンドです。",
	"agent.collect|param|block": "回収(かいしゅう)するブロックまたはアイテムの種類(しゅるい)",
	"agent.destroy": "エージェントに、指定(してい)した方向(ほうこう)に存在(そんざい)するブロックを破壊(はかい)させるためのコマンドです。",
	"agent.destroy|param|direction": "エージェントが壊(こわ)すブロックの方向(ほうこう)。たとえば：SixDirection.Forward",
	"agent.detect": "エージェントが隣接(りんせつ)している指定(してい)した方向(ほうこう)のマスに、ブロックが存在(そんざい)するかどうかを検知(けんち)する。",
	"agent.detect|param|direction": "検出(けんしゅつ)を実施(じっし)する方向(ほうこう)。たとえば：SixDirection.Forward",
	"agent.detect|param|kind": "エージェントが検出(けんしゅつ)しようとするもの",
	"agent.drop": "持(も)ち物(もの)からアイテムを落(お)とします",
	"agent.dropAll": "エージェントが、指定(してい)した方向(ほうこう)にすべてをドロップするコマンドです。",
	"agent.dropAll|param|direction": "アイテムをドロップする方向(ほうこう)。たとえば：SixDirection.Forward",
	"agent.drop|param|direction": "アイテムをドロップする方向(ほうこう)。たとえば：SixDirection.Back",
	"agent.drop|param|quantity": "ドロップするアイテムの数量(すうりょう)。たとえば：1",
	"agent.drop|param|slot": "アイテムを削除(さくじょ)する 1 から 27 のスロット番(ばん)号(ごう)を指定(してい)します。たとえば：1",
	"agent.getItemCount": "指定(してい)したスロットに存在(そんざい)するアイテムの数(かず)を取得(しゅとく)します。",
	"agent.getItemCount|param|slot": "アイテムの数(かず)を数(かぞ)えるスロットの番(ばん)号(ごう) （ 1から27まで ）。たとえば：1",
	"agent.getItemDetail": "エージェントの持(も)ち物(もの)にある指定(してい)されたスロットのアイテム ID を調(しら)べます",
	"agent.getItemDetail|param|slot": "アイテム情報(じょうほう)を返(かえ)すスロットの番(ばん)号(ごう) （ 1から27まで ）。たとえば：1",
	"agent.getItemSpace": "指定(してい)したスロットの空き数量(すうりょう)を取得(しゅとく)します。",
	"agent.getItemSpace|param|slot": "空き数量(すうりょう)を数(かぞ)えるスロットの番(ばん)号(ごう) （ 1から27まで ）。たとえば：1",
	"agent.getOrientation": "エージェントの向(む)きを度数(どすう)で返(かえ)す。",
	"agent.getPosition": "エージェントの位置(いち)をワールド座標(ざひょう)で返(かえ)す。",
	"agent.inspect": "指定(してい)した方向(ほうこう)に存在(そんざい)するブロックを調査(ちょうさ)し、ブロックIDやデータを返(かえ)します。",
	"agent.inspect|param|direction": "調査(ちょうさ)する方向(ほうこう)。たとえば：SixDirection.Forward",
	"agent.inspect|param|kind": "希望(きぼう)する調査(ちょうさ)結果(けっか)のタイプ ： ブロックID、または、ブロックデータ",
	"agent.interact": "(右クリックしたように)操作(そうさ)する。",
	"agent.interact|param|direction": "アイテムを置(お)く方向(ほうこう)。たとえば：SixDirection.Back",
	"agent.move": "エージェントに、指定(してい)した方向(ほうこう)に移動(いどう)するよう命令(めいれい)します。",
	"agent.move|param|blocks": "エージェントを移動(いどう)させるブロックの数(かず)。たとえば：1",
	"agent.move|param|direction": "エージェントの移動(いどう)方向(ほうこう)。たとえば：SixDirection.Forward",
	"agent.place": "エージェントの持(も)ち物(もの)内(ない)の有効(ゆうこう)なスロットにあるアイテムやブロックを置(お)きます",
	"agent.place|param|direction": "アイテムを置(お)く方向(ほうこう)。たとえば：SixDirection.Back",
	"agent.setAssist": "エージェントの設定(せってい)を追加(ついか)します。",
	"agent.setAssist|param|assist": "エージェントの設定(せってい)の種類(しゅるい)",
	"agent.setAssist|param|on": "アシストを有効(ゆうこう)または無効(むこう)に設定(せってい)",
	"agent.setItem": "指定(してい)されたブロック・アイテムをエージェントのインベントリに配置(はいち)する。",
	"agent.setItem|param|blockOrItem": "与(あた)えるブロックまたはアイテム",
	"agent.setItem|param|count": "ブロック・アイテムを配置(はいち)する数量(すうりょう)。たとえば：1",
	"agent.setItem|param|slot": "スロットの番(ばん)号(ごう) （ 1から27まで ） 例(れい)：1",
	"agent.setSlot": "指定(してい)されたエージェントの持(も)ち物(もの)のスロットを有効(ゆうこう)にします。",
	"agent.setSlot|param|slot": "スロットの番(ばん)号(ごう) （ 1から27まで ） 例(れい)：1",
	"agent.teleport": "指定(してい)した方向(ほうこう)、位置(いち)にエージェントをテレポートさせる。",
	"agent.teleportToPlayer": "エージェントをプレイヤーの位置(いち)にテレポートさせます。",
	"agent.teleport|param|dir": "テレポートさせられたエージェントが向(む)く向(む)きの四方(しほう)位(くらい)",
	"agent.teleport|param|pos": "エージェントをテレポートさせる位置(いち)",
	"agent.till": "エージェントに、指定(してい)した方向(ほうこう)の土を耕(たがや)させるコマンドです。",
	"agent.till|param|direction": "土を耕(たがや)す方向(ほうこう)。たとえば：SixDirection.Forward",
	"agent.transfer": "持(も)ち物(もの)にあるアイテムを別(べつ)のスロットに移(うつ)します",
	"agent.transfer|param|destinationSlot": "アイテムをドロップするスロットの番(ばん)号(ごう) （ 1から27まで ） 例(れい)：2",
	"agent.transfer|param|quantity": "移(うつ)すアイテムの数量(すうりょう)。たとえば：1",
	"agent.transfer|param|sourceSlot": "転送(てんそう)元(もと)のスロット番(ばん)号(ごう) （ 1から27まで ） 例(れい)：1",
	"agent.turn": "エージェントの向(む)きを、指定(してい)した方向(ほうこう)に変(か)えます。",
	"agent.turnLeft": "エージェントを90°左に回転(かいてん)させる。",
	"agent.turnRight": "エージェントを90°右に回転(かいてん)させる。",
	"agent.turn|param|direction": "回転(かいてん)方向(ほうこう)。たとえば：TurnDirection.Left",
	"blocks": "世界(せかい)でブロックを追加(ついか)、調査(ちょうさ)、変更(へんこう)するためのすべて。",
	"blocks.block": "ゲーム内(ない)のブロックです。",
	"blocks.blockById": "ゲーム内(ない)のブロックまたはアイテムを ID で表(あらわ)します。",
	"blocks.blockById|param|id": "ゲーム内(ない)ブロックまたはアイテムの ID",
	"blocks.blockByName": "ゲーム内(ない)のブロックまたはアイテムをコード名で表(あらわ)します。",
	"blocks.blockByName|param|name": "ブロックの名前(なまえ)。たとえば：「stone」",
	"blocks.blockWithData": "ゲーム内(ない)のブロックまたはアイテムのデータ値(ち)を表(あらわ)します。",
	"blocks.blockWithData|param|data": "ブロックまたはアイテムのデータ値(ち)",
	"blocks.clone": "立方体(りっぽうたい)領域(りょういき)を別(べつ)の場所(ばしょ)に複製(ふくせい)します。",
	"blocks.cloneFiltered": "領域(りょういき)内(ない)のブロックが特定(とくてい)の種類(しゅるい)のブロックと一致(いっち)する場合(ばあい)にのみ、立方体(りっぽうたい)領域(りょういき)を別(べつ)の場所(ばしょ)に複製(ふくせい)します。",
	"blocks.cloneFiltered|param|begin": "立方体(りっぽうたい)領域(りょういき)の最初(さいしょ)の角(かく)",
	"blocks.cloneFiltered|param|block": "複製(ふくせい)時(じ)に調(しら)べるブロックの種類(しゅるい)",
	"blocks.cloneFiltered|param|destination": "移動(いどう)先領域(りょういき)の最初(さいしょ)の角(かく)",
	"blocks.cloneFiltered|param|end": "立方体(りっぽうたい)領域(りょういき)の対角線(たいかくせん)上にある角(かく)",
	"blocks.cloneFiltered|param|mode": "複製(ふくせい)された領域(りょういき)の処理(しょり)方法(ほうほう)",
	"blocks.clone|param|begin": "立方体(りっぽうたい)領域(りょういき)の最初(さいしょ)の角(かく)",
	"blocks.clone|param|destination": "移動(いどう)先領域(りょういき)の最初(さいしょ)の角(かく)",
	"blocks.clone|param|end": "立方体(りっぽうたい)領域(りょういき)の対角線(たいかくせん)上にある角(かく)",
	"blocks.clone|param|mask": "空気ブロックの処理(しょり)方法(ほうほう)",
	"blocks.clone|param|mode": "複製(ふくせい)された領域(りょういき)の処理(しょり)方法(ほうほう)",
	"blocks.color": "ブロックの色(いろ)の番(ばん)号(ごう)を返(かえ)す。",
	"blocks.colorToBlock": "ゲーム内(ない)の色付(いろづ)きのブロックを表(あらわ)す。",
	"blocks.colorToBlock|param|color": "ブロックの色(いろ)",
	"blocks.colorToBlock|param|type": "羊毛(ようもう)かコンクリートかのブロックの種類(しゅるい)",
	"blocks.color|param|color": "色(いろ)",
	"blocks.comparator": "指定(してい)された状態(じょうたい)のコンパレーターを作成(さくせい)します。",
	"blocks.comparator|param|direction": "コンパレーターの向(む)き",
	"blocks.comparator|param|mode": "コンパレーターの比較(ひかく)モード",
	"blocks.fill": "2 つの地点(ちてん)の間(あいだ)の空間(くうかん)を埋(う)めます。",
	"blocks.fill|param|block": "空間(くうかん)を埋(う)めるのに使用(しよう)するブロック",
	"blocks.fill|param|from": "立方体(りっぽうたい)領域(りょういき)の最初(さいしょ)の角(かく)",
	"blocks.fill|param|operator": "範囲(はんい)内(ない)の既(すで)に置(お)かれていたブロックの処理(しょり)",
	"blocks.fill|param|to": "立方体(りっぽうたい)領域(りょういき)の対角線(たいかくせん)上にある角(かく)",
	"blocks.item": "ゲーム内(ない)のアイテムです。",
	"blocks.kindsOfBlocksInRange": "このAPIは廃止(はいし)される予定(よてい)です。",
	"blocks.lever": "指定(してい)された状態(じょうたい)のレバーを作成(さくせい)します。",
	"blocks.lever|param|position": "レバーの位置(いち)状態(じょうたい)",
	"blocks.onBlockBroken": "特定(とくてい)の種類(しゅるい)のブロックが採掘(さいくつ)されるか、破壊(はかい)されたときにコードを実行(じっこう)します。",
	"blocks.onBlockBroken|param|block": "破壊(はかい)されたときにこのコードを実行(じっこう)するブロックの種類(しゅるい)",
	"blocks.onBlockPlaced": "特定(とくてい)の種類(しゅるい)のブロックが配置(はいち)されたときにコードを実行(じっこう)します。",
	"blocks.onBlockPlaced|param|block": "配置(はいち)されたときにこのコードを実行(じっこう)するブロックの種類(しゅるい)",
	"blocks.place": "世界(せかい)にブロックを置(お)きます",
	"blocks.place|param|block": "配置(はいち)するブロック",
	"blocks.place|param|pos": "ブロックを配置(はいち)する位置(いち)",
	"blocks.positionsOfBlocksInRange": "このAPIは廃止(はいし)される予定(よてい)です。",
	"blocks.print": "指定(してい)ブロックで作(つく)られた指定(してい)文字を、ゲームの世界(せかい)の指定(してい)位置(いち)に表示(ひょうじ)します。",
	"blocks.print|param|block": "文字を表示(ひょうじ)するために使用(しよう)するブロックの種類(しゅるい)",
	"blocks.print|param|direction": "文字を表示(ひょうじ)する方向(ほうこう)",
	"blocks.print|param|position": "文字を表示(ひょうじ)する場所(ばしょ)の座標(ざひょう)",
	"blocks.print|param|text": "世界(せかい)に表示(ひょうじ)する文字。たとえば：「HELLO」",
	"blocks.repeater": "指定(してい)された状態(じょうたい)のリピーターを作成(さくせい)します。",
	"blocks.repeater|param|delay": "ゲームのティックで表(あらわ)したリピーターの遅延(ちえん)時間(じかん)",
	"blocks.repeater|param|direction": "リピーターの向(む)き",
	"blocks.replace": "指定(してい)された領域(りょういき)内(ない)の特定(とくてい)の種類(しゅるい)のすべてのブロックを、新(あたら)しい種類(しゅるい)のブロックに入(い)れ替(か)えます。",
	"blocks.replace|param|from": "立方体(りっぽうたい)領域(りょういき)の最初(さいしょ)の角(かく)",
	"blocks.replace|param|newblock": "既存(きそん)のブロックと入(い)れ替(か)える新(あたら)しいブロックの種類(しゅるい)",
	"blocks.replace|param|oldblock": "新(あたら)しいブロックの種類(しゅるい)と入(い)れ替(か)えるブロックの種類(しゅるい)",
	"blocks.replace|param|to": "立方体(りっぽうたい)領域(りょういき)の対角線(たいかくせん)上にある角(かく)",
	"blocks.testForBlock": "指定(してい)した座標(ざひょう)のブロックが特定(とくてい)の種類(しゅるい)のブロックかどうかを調査(ちょうさ)します。",
	"blocks.testForBlocks": "2 つの領域(りょういき)内(ない)のブロックが一致(いっち)するかどうかを調査(ちょうさ)します。",
	"blocks.testForBlock|param|block": "調査(ちょうさ)するブロックの種類(しゅるい)",
	"blocks.testForBlock|param|pos": "ブロックが存在(そんざい)すべき座標(ざひょう)",
	"console.inspect": "指定(してい)されたオブジェクトや値(あたい)を文字列(もじれつ)で表現(ひょうげん)する。",
	"console.inspect|param|maxElements": "[省略(しょうりゃく)可能(かのう)]文字列(もじれつ)で表現(ひょうげん)するオブジェクトの最大(さいだい)数値(すうち)",
	"console.inspect|param|obj": "文字列(もじれつ)で表現(ひょうげん)する値(あたい)",
	"gameplay": "ゲームのモード、天気、時間(じかん)を制御(せいぎょ)し、ルールを変更(へんこう)するためのコマンド。",
	"gameplay.dismissChat": "チャット画面(がめん)が開(ひら)いている場合(ばあい)は閉(と)じる (Minecraft Educationのみ)",
	"gameplay.immutableWorld": "ワールドか編集(へんしゅう)可能(かのう)かどうかを変更(へんこう)する。",
	"gameplay.immutableWorld|param|enabled": "ワールドの編集(へんしゅう)が許可(きょか)されている場合(ばあい)はtrue、許可(きょか)されない場合(ばあい)はfalse",
	"gameplay.isDaylightTime": "現在(げんざい)の時刻(じこく)を、ゲームのティック数(すう)で取得(しゅとく)します。",
	"gameplay.isDaylightTime|param|query": "取得(しゅとく)する時刻(じこく)の種類(しゅるい)",
	"gameplay.setDifficulty": "ゲームの難易(なんい)度(ど)を変更(へんこう)します。",
	"gameplay.setDifficulty|param|difficulty": "新(あたら)しい難易(なんい)度(ど)",
	"gameplay.setGameMode": "選択(せんたく)したプレイヤーのゲームモードを変更(へんこう)します。",
	"gameplay.setGameMode|param|mode": "目的(もくてき)のゲームモード。たとえば：GameMode.Survival",
	"gameplay.setGameMode|param|player": "ゲームモードを変更(へんこう)するプレイヤーを決定(けってい)するセレクター",
	"gameplay.setGameRule": "ゲームのルールを有効(ゆうこう)または無効(むこう)にします。",
	"gameplay.setGameRule|param|enabled": "指定(してい)されたルールを有効(ゆうこう)にするかどうか",
	"gameplay.setGameRule|param|rule": "変更(へんこう)するゲームのルール。たとえば：GameRule.PvP",
	"gameplay.setWeather": "現在(げんざい)の天気を変更(へんこう)します。",
	"gameplay.setWeather|param|weather": "目的(もくてき)の天気。たとえば：Weather.Clear",
	"gameplay.time": "既定(きてい)の時刻(じこく)を表(あらわ)します。",
	"gameplay.timeAdd": "現在(げんざい)の時刻(じこく)にティック（このゲームでの時間(じかん)の単位(たんい)）を追加(ついか)します。",
	"gameplay.timeAdd|param|amount": "現在(げんざい)の時刻(じこく)に追加(ついか)するティックの数(かず)。たとえば：100",
	"gameplay.timeQuery": "現在(げんざい)の時刻(じこく)を、ゲームのティック数(すう)で取得(しゅとく)します。",
	"gameplay.timeQuery|param|query": "取得(しゅとく)する時刻(じこく)の種類(しゅるい)",
	"gameplay.timeSet": "現在(げんざい)の時刻(じこく)を、ゲームのティック数(すう)を指定(してい)して既定(きてい)の時刻(じこく)か指定(してい)の時刻(じこく)に設定(せってい)します。",
	"gameplay.timeSet|param|time": "目的(もくてき)の時刻(じこく)。たとえば：DayTime.Day",
	"gameplay.time|param|time": "既定(きてい)の時刻(じこく)。たとえば：DateTime.Day",
	"gameplay.title": "選択(せんたく)したターゲットのタイトルとサブタイトルを表示(ひょうじ)します",
	"gameplay.title|param|subTitle": "表示(ひょうじ)するサブタイトル",
	"gameplay.title|param|target": "選択(せんたく)するプレイヤーとエンティティ",
	"gameplay.title|param|title": "表示(ひょうじ)する大きなタイトル",
	"gameplay.toggleDownfall": "雨が降(ふ)っていなかったら雨を降(ふ)らし、雨が降(ふ)っていたら雨を止(と)めます。",
	"gameplay.xp": "選択(せんたく)したプレイヤーに経験(けいけん)値(ち)を追加(ついか)します。",
	"gameplay.xp|param|amount": "追加(ついか)する経験(けいけん)値(ち)のポイント。たとえば：10",
	"gameplay.xp|param|target": "経験(けいけん)値(ち)を追加(ついか)するプレイヤーを決定(けってい)するためのセレクター",
	"loops.forever": "コードを、ずっとバックグラウンドでくり返(かえ)します。くり返(かえ)しの1回(かい)ごとに、ほかのコードを実行(じっこう)する時間(じかん)を与(あた)えます。",
	"loops.forever|param|body": "ずっとくり返(かえ)すコード",
	"loops.pause": "ミリ秒(びょう)で指定(してい)された時間(じかん)、一時(いちじ)停止(ていし)します。",
	"loops.pause|param|ms": "ひと休みする時間(じかん)の長(なが)さ（ミリ秒(びょう)）。たとえば：100、200、500、1000、2000",
	"loops.runInBackground": "現在(げんざい)のコードと並行(へいこう)してこのコードを実行(じっこう)します。",
	"mobs": "Minecraft の世界(せかい)に住(す)んでいる生(い)き物(もの)。",
	"mobs._queryTargetCore": "指定(してい)されたターゲットセレクターの情報(じょうほう)を取得(しゅとく)する。",
	"mobs._queryTargetCore|param|target": "情報(じょうほう)を取得(しゅとく)するエンティティを決定(けってい)するターゲットセレクター",
	"mobs.animal": "ゲーム内(ない)の動物(どうぶつ)です。",
	"mobs.animal|param|name": "動物(どうぶつ)の種類(しゅるい)",
	"mobs.applyEffect": "指定(してい)された対象(たいしょう)に特殊(とくしゅ)効果(こうか)を適用(てきよう)します",
	"mobs.applyEffect|param|amplifier": "特殊(とくしゅ)効果(こうか)の強(つよ)さ",
	"mobs.applyEffect|param|duration": "エフェクトの長(なが)さ",
	"mobs.applyEffect|param|effect": "適用(てきよう)する特殊(とくしゅ)効果(こうか)",
	"mobs.applyEffect|param|target": "どのエンティティが手に持(も)っているアイテムにエンチャントを付与(ふよ)されるかを決定(けってい)するターゲットセレクター",
	"mobs.clearEffect": "指定(してい)された対象(たいしょう)からすべてのステータス効果(こうか)を解除(かいじょ)する。",
	"mobs.clearEffect|param|target": "どのエンティティがステータス効果(こうか)を解除(かいじょ)されるかを決定(けってい)するターゲットセレクター",
	"mobs.effect": "指定(してい)された対象(たいしょう)に特殊(とくしゅ)効果(こうか)を適用(てきよう)します",
	"mobs.effect|param|amplifier": "特殊(とくしゅ)効果(こうか)の強(つよ)さ",
	"mobs.effect|param|duration": "特殊(とくしゅ)効果(こうか)の長(なが)さ",
	"mobs.effect|param|effect": "適用(てきよう)する特殊(とくしゅ)効果(こうか)",
	"mobs.effect|param|target": "どのエンティティが手に持(も)っているアイテムにエンチャントを付与(ふよ)されるかを決定(けってい)するターゲットセレクター",
	"mobs.enchant": "指定(してい)されたターゲットに特定(とくてい)のエンチャントを適用(てきよう)します。",
	"mobs.enchant|param|level": "エンチャントの強(つよ)さ。たとえば：1",
	"mobs.enchant|param|target": "どのプレイヤーがエンチャントを得(え)るかを決定(けってい)するターゲットセレクター",
	"mobs.entitiesByType": "特定(とくてい)の種類(しゅるい)のモブ（動物(どうぶつ)やモンスター）をすべて選択(せんたく)します。",
	"mobs.entitiesByType|param|type": "選択(せんたく)するモブの種類(しゅるい)",
	"mobs.execute": "他(ほか)のターゲットとしてコマンドを実行(じっこう)します。",
	"mobs.executeDetect": "特定(とくてい)の種類(しゅるい)のブロックが指定(してい)された位置(いち)で検出(けんしゅつ)されたときにコマンドを実行(じっこう)します。",
	"mobs.executeDetect|param|command": "指定(してい)されたブロックが正常(せいじょう)に検出(けんしゅつ)された場合(ばあい)に選択(せんたく)したターゲットが実行(じっこう)する完全(かんぜん)なコマンド。たとえば：「say Hi!」",
	"mobs.executeDetect|param|detectBlock": "調査(ちょうさ)するブロックの種類(しゅるい)",
	"mobs.executeDetect|param|detectPosition": "ブロックを検出(けんしゅつ)する位置(いち)",
	"mobs.execute|param|command": "選択(せんたく)したターゲットが実行(じっこう)する完全(かんぜん)なコマンド。たとえば：「say Hi!」",
	"mobs.execute|param|position": "コマンドを実行(じっこう)する位置(いち)の座標(ざひょう)",
	"mobs.execute|param|target": "どのエンティティがコマンドを実行(じっこう)するのかを決定(けってい)するターゲットセレクター",
	"mobs.give": "ゲームからブロックやアイテムを指定(してい)されたプレイヤーに渡(わた)します。",
	"mobs.give|param|amount": "与(あた)える数量(すうりょう)。たとえば：1",
	"mobs.give|param|block": "与(あた)えるブロックまたはアイテム",
	"mobs.give|param|target": "どのプレイヤーがブロックやアイテムを得(え)るかを決定(けってい)するターゲットセレクター",
	"mobs.kill": "選択(せんたく)されたエンティティを行動(こうどう)不能(ふのう)にする",
	"mobs.kill|param|target": "どのエンティティが行動(こうどう)不能(ふのう)になるのかを決定(けってい)するターゲットセレクター",
	"mobs.monster": "ゲーム内(ない)のモンスターです。",
	"mobs.monster|param|name": "モンスターの種類(しゅるい)",
	"mobs.near": "指定(してい)した位置(いち)近(ちか)くのターゲットを選択(せんたく)します",
	"mobs.near|param|pos": "ターゲットを選択(せんたく)する場所(ばしょ)付近(ふきん)の位置(いち)",
	"mobs.near|param|radius": "指定(してい)されたターゲット選択(せんたく)位置(いち)からの距離(きょり)（ブロック単位(たんい)）。たとえば：5",
	"mobs.near|param|target": "選択(せんたく)されるエンティティの種類(しゅるい)",
	"mobs.onMobKilled": "特定(とくてい)の種類(しゅるい)の生(い)き物(もの)が行動(こうどう)不能(ふのう)になったときに、コードを実行(じっこう)します。",
	"mobs.onMobKilled|param|mob": "生(い)き物(もの)の種類(しゅるい)",
	"mobs.parseSelector": "指定(してい)の文字列(もじれつ)を TargetSelector オブジェクトに解析(かいせき)します。この関数(かんすう)は正しい型(かた)の引数(ひきすう)が与(あた)えられたかどうかや、引数(ひきすう)の名前(なまえ)が有効(ゆうこう)であるかどうかを確認(かくにん)するためのチェックは行(おこな)いません。\n\n@returns 解析(かいせき)された TargetSelector オブジェクトまたは null（文字列(もじれつ)が無効(むこう)だった場合(ばあい)）",
	"mobs.parseSelector|param|str": "文字列(もじれつ)を解析(かいせき)するターゲットセレクター",
	"mobs.playerByName": "指定(してい)された名前(なまえ)を持(も)つプレイヤーを選択(せんたく)します。",
	"mobs.playerByName|param|name": "選択(せんたく)するプレイヤーの名前(なまえ)。たとえば：名前(なまえ)",
	"mobs.playersInGameMode": "指定(してい)されたゲームモードのプレイヤーをすべて選択(せんたく)します。",
	"mobs.playersInGameMode|param|mode": "すべてのプレイヤーを選択(せんたく)するゲームモード",
	"mobs.projectile": "ゲーム内(ない)の飛(と)び道具(どうぐ)です。",
	"mobs.projectile|param|name": "飛(と)び道具(どうぐ)の種類(しゅるい)",
	"mobs.queryTarget": "指定(してい)されたターゲットセレクターの情報(じょうほう)を取得(しゅとく)する。",
	"mobs.queryTarget|param|target": "情報(じょうほう)を取得(しゅとく)するエンティティを決定(けってい)するターゲットセレクター",
	"mobs.spawn": "指定(してい)した場所(ばしょ)に生(い)き物(もの)を召喚(しょうかん)します。",
	"mobs.spawnParticle": "指定(してい)された位置(いち)にパーティクルを表示(ひょうじ)させる。",
	"mobs.spawnParticle|param|position": "パーティクルを表示(ひょうじ)させる位置(いち)",
	"mobs.spawn|param|destination": "生(い)き物(もの)を召喚(しょうかん)する位置(いち)の座標(ざひょう)",
	"mobs.spawn|param|mob": "召喚(しょうかん)する生(い)き物(もの)の種類(しゅるい)",
	"mobs.target": "プレイヤーまたはモブのセットを選択(せんたく)します。",
	"mobs.target|param|kind": "選択(せんたく)されるエンティティの種類(しゅるい)",
	"mobs.teleportToPlayer|param|destination": "どのプレイヤーにエンティティをテレポートするのかを決定(けってい)するターゲットセレクター",
	"mobs.teleportToPlayer|param|target": "どのエンティティがテレポートされるのかを決定(けってい)するターゲットセレクター",
	"mobs.teleportToPosition": "エンティティをほかの場所(ばしょ)にテレポートします。",
	"mobs.teleportToPosition|param|destination": "選択(せんたく)したエンティティのテレポート先の座標(ざひょう)",
	"mobs.teleportToPosition|param|target": "どのエンティティがテレポートされるのかを決定(けってい)するターゲットセレクター",
	"parseFloat": "文字列(もじれつ)を数値(すうち)に変換(へんかん)します。",
	"parseInt": "文字列(もじれつ)を整数(せいすう)に変換(へんかん)します。",
	"parseInt|param|radix": "テキスト内(ない)の数値(すうち)の基数(きすう)を指定(してい)する 2 ~ 36 の範囲(はんい)の値(あたい)です。",
	"parseInt|param|text": "整数(せいすう)に変換(へんかん)する文字列(もじれつ)。例(れい): \"123\"",
	"player": "コマンドの実行(じっこう)、情報(じょうほう)交換(こうかん)、ゲーム内(ない)で発生(はっせい)するイベントへの応答(おうとう)を行(おこな)います。",
	"player.chatCommandSyntaxError": "ゲーム内(ない)チャットでチャットコマンドのヘルプメッセージを表示(ひょうじ)します。\n* @param helpStr 書式(しょしき)付(つ)きのコマンド構文(こうぶん)",
	"player.errorMessage": "ゲーム内(ない)チャットでエラーメッセージを表示(ひょうじ)します。\n* @param msg ゲーム内(ない)チャットに表示(ひょうじ)するエラーメッセージ",
	"player.execute": "現在(げんざい)のプレイヤーとしてゲームのコマンドを実行(じっこう)します。",
	"player.execute|param|command": "実行(じっこう)するスラッシュコマンド（先頭(せんとう)に``/``を入れる必要(ひつよう)はありません）。たとえば：「say Hi!」",
	"player.getChatArg": "最後(さいご)のプレイヤーのチャットメッセージから指定(してい)された引数(ひきすう)を取得(しゅとく)します。",
	"player.getChatArgs": "指定(してい)したコマンドの引数(ひきすう)を取得(しゅとく)します。\n\n* 注意(ちゅうい)：これは RefCollection を返(かえ)しますが、シミュレータの設定(せってい)により RefCollection を return 型(かた)として宣言(せんげん)することができません。代(か)わりにシグネチャでは string[] を使用(しよう)しますが、実際(じっさい)には RefCollection を <any> としてキャストして返(かえ)します。",
	"player.getChatArgs|param|command": "引数(ひきすう)を取得(しゅとく)するチャットコマンド",
	"player.getOrientation": "プレイヤーの向(む)きを度数(どすう)で返(かえ)す。",
	"player.message": "最後(さいご)のメッセージがある場合(ばあい)は取得(しゅとく)します。",
	"player.name": "現在(げんざい)のプレイヤー（あなた）の名前(なまえ)を返(かえ)します。",
	"player.onArrowShot": "現在(げんざい)のプレーヤーが矢(や)を打(う)った時(とき)に、コードを実行(じっこう)します。",
	"player.onBounced": "現在(げんざい)のプレーヤーがスライムブロックの上でバウンドした時(とき)に、コードを実行(じっこう)します。",
	"player.onCameraUsed": "カメラで写真(しゃしん)を撮影(さつえい)した時(とき)に、コードを実行(じっこう)します。",
	"player.onChat": "設定(せってい)されたキーワードをゲーム内(ない)チャットで入力すると、ハンドラー内(ない)のコードを実行(じっこう)します。",
	"player.onChatCommand": "設定(せってい)されたキーワードをゲーム内(ない)チャットで入力すると、ハンドラー内(ない)のコードを実行(じっこう)します。",
	"player.onChatCommandCore": "キーワードをチャットで入力すると、コードを実行(じっこう)します。",
	"player.onChatCommandCore|param|command": "このコマンドに関連(かんれん)づけられるチャットのキーワード（``*`` はすべてのメッセージに対(たい)して）。たとえば：「jump」",
	"player.onChatCommand|param|command": "このコマンドに関連(かんれん)づけられるチャットのキーワード（``*`` はすべてのメッセージに対(たい)して）。たとえば：「jump」",
	"player.onChat|param|command": "このコマンドに関連(かんれん)づけられるチャットのキーワード（``*`` はすべてのメッセージに対(たい)して）。たとえば：「jump」",
	"player.onDied": "現在(げんざい)のプレイヤーが死(し)んだとき、コードを実行(じっこう)します。",
	"player.onItemInteracted": "アイテムが使用(しよう)された時(とき)にプログラムを実行(じっこう)する",
	"player.onTeleported": "現在(げんざい)のプレーヤーがテレポートをするときにコードを実行(じっこう)します。",
	"player.onTellCommand": "ほかのプレーヤーがあなたに特定(とくてい)のメッセージをささやいたときにコードを実行(じっこう)します。",
	"player.onTellCommand|param|command": "このコマンドに関連(かんれん)づけられるチャットのキーワード（``*`` はすべてのメッセージに対(たい)して）。たとえば：「jump」",
	"player.onTravelled": "現在(げんざい)のプレーヤーが指定(してい)された方法(ほうほう)で移動(いどう)した時(とき)にコードを実行(じっこう)します。",
	"player.onTravelled|param|method": "移動(いどう)方法(ほうほう)",
	"player.position": "現在(げんざい)のプレイヤーの世界(せかい)での位置(いち)を返(かえ)します。",
	"player.runChatCommand": "コード内(ない)でチャットコマンドを実行(じっこう)します。",
	"player.runChatCommandWithArguments": "コード内(ない)でチャットコマンドを引数(ひきすう)付(つ)きで実行(じっこう)します。",
	"player.runChatCommandWithArguments|param|arg": "チャット コマンドで利用(りよう)したいすべての引数(ひきすう)を含(ふく)む文字列(もじれつ)",
	"player.runChatCommandWithArguments|param|command": "実行(じっこう)するチャットコマンド。たとえば：「jump」",
	"player.runChatCommand|param|command": "実行(じっこう)するチャットコマンド。たとえば：「jump」",
	"player.say": "ゲーム内(ない)チャットにメッセージを送信(そうしん)します。",
	"player.say|param|message": "チャットに表示(ひょうじ)するメッセージ。たとえば：「Hi!」",
	"player.teleport": "現在(げんざい)のプレーヤーを別(べつ)の位置(いち)にテレポートさせます。",
	"player.teleport|param|to": "目的(もくてき)の位置(いち)",
	"player.tell|param|message": "ささやく文字列(もじれつ)。たとえば：「Hi!」",
	"player.warningMessage": "チャットで(橙色(だいだいいろ)の文字で)警告(けいこく)を表示(ひょうじ)する。",
	"pos": "新(あたら)しく相対的(そうたいてき)な位置(いち)を作成(さくせい)します（東西(とうざい)、上下、南北(なんぼく)）。",
	"posCamera": "新(あたら)しくカメラ座標(ざひょう)を作成(さくせい)する。右、上、前(まえ)",
	"posCamera|param|x": "左（-x）または右（+x）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"posCamera|param|y": "上（+y）または下（-y）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"posCamera|param|z": "後(うし)ろ（-z）または前(まえ)（-z）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"posLocal": "新(あたら)しくローカル座標(ざひょう)を作成(さくせい)する。左、上、前(まえ)",
	"posLocal|param|x": "左（+x）または右（-x）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"posLocal|param|y": "上（+y）または下（-y）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"posLocal|param|z": "前(まえ)（+z）または後(うし)ろ（-z）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions": "世界(せかい)での位置(いち)と相対的(そうたいてき)な位置(いち)を表(あらわ)します。",
	"positions.add": "2 つの指定(してい)位置(いち)を追加(ついか)して新(あたら)しい位置(いち)を作成(さくせい)します。",
	"positions.add|param|p1": "追加(ついか)する最初(さいしょ)の位置(いち)",
	"positions.add|param|p2": "追加(ついか)する二番目(にばんめ)の位置(いち)",
	"positions.create": "新(あたら)しく相対的(そうたいてき)な位置(いち)を作成(さくせい)します（東西(とうざい)、上下、南北(なんぼく)）。",
	"positions.createCamera": "新(あたら)しくカメラ座標(ざひょう)を作成(さくせい)する。右、上、前(まえ)",
	"positions.createCamera|param|x": "左（+x）または右（-x）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions.createCamera|param|y": "上（+y）または下（-y）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions.createCamera|param|z": "前(まえ)（+z）または後(うし)ろ（-z）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions.createHybrid": "相対(そうたい)座標(ざひょう)と絶対(ぜったい)座標(ざひょう)を混在(こんざい)させた新(あたら)しい位置(いち)を作成(さくせい)します。",
	"positions.createLocal": "新(あたら)しくローカル座標(ざひょう)を作成(さくせい)する。左、上、前(まえ)",
	"positions.createLocal|param|x": "左（+x）または右（-x）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions.createLocal|param|y": "上（+y）または下（-y）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions.createLocal|param|z": "前(まえ)（+z）または後(うし)ろ（-z）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions.createWorld": "新(あたら)しい世界(せかい)での位置(いち)を作成(さくせい)します（東西(とうざい)、上下、南北(なんぼく)）。",
	"positions.createWorld|param|x": "東(ひがし)（+x）または西(にし)（-x）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions.createWorld|param|y": "上（+y）または下（-y）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions.createWorld|param|z": "南(みなみ)（+z）または北(きた)（-z）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions.create|param|x": "東(ひがし)（+x）または西(にし)（-x）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions.create|param|y": "上（+y）または下（-y）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions.create|param|z": "南(みなみ)（+z）または北(きた)（-z）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"positions.equals": "2つの位置(いち)が同等(どうとう)かどうかを比較(ひかく)します。",
	"positions.equals|param|p1": "比較(ひかく)する最初(さいしょ)の位置(いち)",
	"positions.equals|param|p2": "比較(ひかく)する 2 番目(つがいめ)の位置(いち)",
	"positions.groundPosition": "指定(してい)された位置(いち)の下の地面(じめん)を探(さが)し、そのすぐ上にある空気ブロックの座標(ざひょう)を返(かえ)す。もし指定(してい)された位置(いち)のブロックが固体(こたい)ブロックの場合(ばあい)、その下を探(さが)していき見つかった空気ブロックから地面(じめん)を探(さが)す。液体(えきたい)は固体(こたい)とみなされる。",
	"positions.groundPosition|param|pos": "地面(じめん)を探(さが)し始(はじ)める位置(いち)",
	"positions.random": "指定(してい)された立方体(りっぽうたい)領域(りょういき)内(ない)でランダムに位置(いち)を選択(せんたく)します。",
	"positions.random|param|p1": "立方体(りっぽうたい)領域(りょういき)の最初(さいしょ)の角(かく)の位置(いち)",
	"positions.random|param|p2": "立方体(りっぽうたい)領域(りょういき)の対角線(たいかくせん)上にある角(かく)の位置(いち)",
	"positions.toCompassDirection": "方位(ほうい)の度数(どすう)を最(もっと)も近(ちか)い四方(しほう)位(くらい)に変換(へんかん)する。",
	"positions.toCompassDirection|param|deg": "四方(しほう)位(くらい)に変換(へんかん)される方位(ほうい)の度数(どすう)",
	"pos|param|x": "東(ひがし)（+x）または西(にし)（-x）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"pos|param|y": "上（+y）または下（-y）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"pos|param|z": "南(みなみ)（+z）または北(きた)（-z）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"randint": "min と max の間(あいだ)に含(ふく)まれる疑似(ぎじ)乱数(らんすう)を返(かえ)します。両方(りょうほう)の数値(すうち)が整数(せいすう)値(ち)の場合(ばあい)は、結果(けっか)も整数(せいすう)値(ち)となります。",
	"randint|param|max": "境界(きょうかい)を含(ふく)めた上限(じょうげん)。たとえば：10",
	"randint|param|min": "境界(きょうかい)を含(ふく)めた下限(かげん)。たとえば：0",
	"randpos": "指定(してい)された立方体(りっぽうたい)領域(りょういき)内(ない)でランダムに位置(いち)を選択(せんたく)します。",
	"randpos|param|p1": "立方体(りっぽうたい)領域(りょういき)の最初(さいしょ)の角(かく)の位置(いち)",
	"randpos|param|p2": "立方体(りっぽうたい)領域(りょういき)の対角線(たいかくせん)上にある角(かく)の位置(いち)",
	"world": "新(あたら)しい世界(せかい)での位置(いち)を作成(さくせい)します（東西(とうざい)、上下、南北(なんぼく)）。",
	"world|param|x": "東(ひがし)（+x）または西(にし)（-x）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"world|param|y": "上（+y）または下（-y）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"world|param|z": "南(みなみ)（+z）または北(きた)（-z）方向(ほうこう)の座標(ざひょう)（ブロック単位(たんい)）",
	"ExplorationTimeQuery": "時間(じかん)を取得(しゅとく)する際(さい)の時間(じかん)の種類(しゅるい)",
	"exploration.isDaylightTimeAsync": "現在(げんざい)の時刻(じこく)を、ゲームのティック数(すう)で取得(しゅとく)します。",
	"exploration.isDaylightTimeAsync|param|query": "取得(しゅとく)する時刻(じこく)の種類(しゅるい)",
	"exploration.setDifficulty|param|difficulty": "新(あたら)しい難易(なんい)度(ど)",
	"exploration.setExplorationRule|param|enabled": "指定(してい)されたルールを有効(ゆうこう)にするかどうか",
	"exploration.setWeather": "現在(げんざい)の天気を変更(へんこう)します。",
	"exploration.time": "既定(きてい)の時刻(じこく)を表(あらわ)します。",
	"exploration.timeAdd": "現在(げんざい)の時刻(じこく)にティック（このゲームでの時間(じかん)の単位(たんい)）を追加(ついか)します。",
	"exploration.timeAdd|param|amount": "現在(げんざい)の時刻(じこく)に追加(ついか)するティックの数(かず)。たとえば：100",
	"exploration.timeQuery|param|query": "取得(しゅとく)する時刻(じこく)の種類(しゅるい)",
	"exploration.timeSet|param|time": "目的(もくてき)の時刻(じこく)。たとえば：DayTime.Day",
	"exploration.time|param|time": "既定(きてい)の時刻(じこく)。たとえば：DateTime.Day",
	"exploration.title": "選択(せんたく)したターゲットのタイトルとサブタイトルを表示(ひょうじ)します",
	"exploration.title|param|subTitle": "表示(ひょうじ)するサブタイトル",
	"exploration.title|param|title": "表示(ひょうじ)する大きなタイトル",
	"exploration.toggleDownfall": "雨が降(ふ)っていなかったら雨を降(ふ)らし、雨が降(ふ)っていたら雨を止(と)めます。",
	"exploration.xp|param|amount": "追加(ついか)する経験(けいけん)値(ち)のポイント。たとえば：10",
	"mobs.boost": "指定(してい)されたターゲットに特定(とくてい)のエンチャントを適用(てきよう)します。",
	"mobs.onMobEliminated|param|mob": "生(い)き物(もの)の種類(しゅるい)",
	"mobs.targetUser|param|kind": "選択(せんたく)されるエンティティの種類(しゅるい)",
	"mobs.teleportToUser|param|target": "どのエンティティがテレポートされるのかを決定(けってい)するターゲットセレクター",
	"user.execute|param|command": "実行(じっこう)するスラッシュコマンド（先頭(せんとう)に``/``を入れる必要(ひつよう)はありません）。たとえば：「say Hi!」",
	"user.message": "最後(さいご)のメッセージがある場合(ばあい)は取得(しゅとく)します。",
	"user.onChat|param|command": "このコマンドに関連(かんれん)づけられるチャットのキーワード（``*`` はすべてのメッセージに対(たい)して）。たとえば：「jump」",
	"user.onTellCommand|param|command": "このコマンドに関連(かんれん)づけられるチャットのキーワード（``*`` はすべてのメッセージに対(たい)して）。たとえば：「jump」",
	"user.onTravelled|param|method": "移動(いどう)方法(ほうほう)",
	"user.runChatCommand": "コード内(ない)でチャットコマンドを実行(じっこう)します。",
	"user.runChatCommandWithArguments": "コード内(ない)でチャットコマンドを引数(ひきすう)付(つ)きで実行(じっこう)します。",
	"user.runChatCommandWithArguments|param|arg": "チャット コマンドで利用(りよう)したいすべての引数(ひきすう)を含(ふく)む文字列(もじれつ)",
	"user.runChatCommandWithArguments|param|command": "実行(じっこう)するチャットコマンド。たとえば：「jump」",
	"user.runChatCommand|param|command": "実行(じっこう)するチャットコマンド。たとえば：「jump」",
	"user.teleport|param|to": "目的(もくてき)の位置(いち)",
	"user.tell|param|message": "ささやく文字列(もじれつ)。たとえば：「Hi!」",
	"shapes": "線(せん)、球(たま)およびその他(ほか)の幾何(きか)学図形(ずけい)を作(つく)ります。",
	"shapes.circle": "中心点(ちゅうしんてん)を中心(ちゅうしん)にブロックで円を作(つく)ります。",
	"shapes.circle|param|radius": "円の半径(はんけい)。たとえば：5",
	"shapes.line": "ある位置(いち)から別(べつ)の位置(いち)までブロックの線(せん)を作(つく)ります。",
	"shapes.sphere": "中心点(ちゅうしんてん)を中心(ちゅうしん)にブロックで球(たま)を作(つく)ります。",
	"shapes.sphere|param|radius": "球(たま)の半径(はんけい)。たとえば：5"
}